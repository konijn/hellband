# File: makefile.cyg

# Purpose: Makefile support for "main-win.c" compiling with Cygwin.
# This got updated in 2018
# Run in cygwin with
#make -fmakefile.cyg install

#
# Basic definitions
#

# Objects
EXOBJS = \
  angband.res z-util.o z-virt.o z-form.o z-rand.o z-term.o \
  variable.o tables.o util.o cave.o \
  object1.o object2.o monster1.o monster2.o \
  xtra1.o xtra2.o spells1.o spells2.o \
  melee1.o melee2.o save.o files.o \
  cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o \
  store.o birth.o load.o \
  wizard1.o wizard2.o \
  generate.o dungeon.o init1.o init2.o \
  main-win.o readdib.o \
  quest.o

HDRS = \
	h-basic.h \
	h-define.h h-type.h \
	h-system.h h-config.h

INCS = \
	angband.h \
	config.h defines.h \
	types.h externs.h \
	z-term.h z-rand.h \
	z-virt.h $(HDRS)

# Compiler
# So... I dislike needing to install mingw separately,
# So I am using x86_64-w64-mingw32-gcc which uses a separate
# Cygwin package (make sure to install it), on older 32 bit systems
# you could just use gcc
#CC = gcc
CC=x86_64-w64-mingw32-gcc

# Compiler flags, you are allowed to remove -ggdb3 which adds a ton of debug info
# Also set Optimizer to 3 for a release
CFLAGS = -Wall -O3 -fno-strength-reduce -DWINDOWS 

# Libraries
LIBS = -s -mwindows  -lwinmm

WRES = windres

#
# Targets
#

default:	hellband

install:	hellband movebin cleanobjs

movebin:
		mv -f hellband.exe ../hellband.exe

cleanobjs:
		rm -f $(EXOBJS)

cleanbin:
		rm -f hellband

clean:  cleanobjs cleanbin

#
# Link executables
#

hellband: $(EXOBJS)
	$(CC) -o hellband $(EXOBJS) $(INCDIRS) $(LIBDIRS) $(LIBS)

#
# Compile source files
#

#If you are on 64 bit, then you need to remove the angband.rc to force re-compiling
#32 bit	$(WRES) $< -O coff -o $@
#64 bit	$(WRES) $< -O coff --target=pe-x86-64 -o $@
angband.res : angband.rc
	$(WRES) $< -O coff -v --target=pe-x86-64 -o $@

#
# Compiling objects
#

birth.o: birth.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cave.o: cave.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cmd1.o: cmd1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cmd2.o: cmd2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cmd3.o: cmd3.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cmd4.o: cmd4.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cmd5.o: cmd5.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

cmd6.o: cmd6.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

dungeon.o: dungeon.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

files.o: files.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

generate.o: generate.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

init1.o: init1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

init2.o: init2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

load.o: load.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

loadsave.o: loadsave.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

main-win.o: main-win.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

melee1.o: melee1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

melee2.o: melee2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

monster1.o: monster1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

monster2.o: monster2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

object1.o: object1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

object2.o: object2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

powers.o: powers.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

quest.o: quest.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

#
# Note the additional -DNEAR= flag to cope with the 'NEAR'
# keyword used in readdib.c
#

readdib.o: readdib.c $(INCS) readdib.h
	$(CC) $(CFLAGS) -DNEAR= $(INCDIRS) -c -o $@ $<

save.o: save.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

spells1.o: spells1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

spells2.o: spells2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

squelch.o: squelch.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

store.o: store.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

tables.o: tables.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

ui.o: ui.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

util.o: util.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

variable.o: variable.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

wizard1.o: wizard1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

wizard2.o: wizard2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

xtra1.o: xtra1.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

xtra2.o: xtra2.c $(INCS)
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

z-form.o: z-form.c $(HDRS) z-virt.h externs.h
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

z-rand.o: z-rand.c $(HDRS) z-rand.h externs.h
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

z-term.o: z-term.c $(HDRS) z-term.h z-virt.h externs.h
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

z-util.o: z-util.c $(HDRS) externs.h
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<

z-virt.o: z-virt.c $(HDRS) z-virt.h externs.h
	$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<
